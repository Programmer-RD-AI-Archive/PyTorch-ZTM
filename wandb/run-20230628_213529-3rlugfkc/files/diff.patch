diff --git a/.ipynb_checkpoints/02-checkpoint.ipynb b/.ipynb_checkpoints/02-checkpoint.ipynb
index f66ddd5..3ebd749 100644
--- a/.ipynb_checkpoints/02-checkpoint.ipynb
+++ b/.ipynb_checkpoints/02-checkpoint.ipynb
@@ -18,8 +18,8 @@
     "import sklearn\n",
     "from sklearn.datasets import make_circles\n",
     "# Make 100 Samples\n",
-    "n_samples = 10000\n",
-    "X,y = make_circles(n_samples,noise=0.125,random_state=42)"
+    "n_samples = 25000\n",
+    "X,y = make_circles(n_samples,noise=0.0625,random_state=42)"
    ]
   },
   {
@@ -44,12 +44,12 @@
     {
      "data": {
       "text/plain": [
-       "(array([[ 0.19998864,  0.90325107],\n",
-       "        [ 1.26750313, -0.58094471],\n",
-       "        [-0.63155772,  0.70494095],\n",
-       "        [ 1.10157297, -0.34613108],\n",
-       "        [ 0.84793432, -0.48702293]]),\n",
-       " array([1, 0, 0, 0, 0]))"
+       "(array([[-0.89199281, -0.32863604],\n",
+       "        [ 0.81824047, -0.31242069],\n",
+       "        [ 0.17614256, -1.14754116],\n",
+       "        [ 0.70026218,  0.35655876],\n",
+       "        [ 0.6002745 ,  0.63273534]]),\n",
+       " array([0, 1, 0, 1, 1]))"
       ]
      },
      "execution_count": 3,
@@ -84,31 +84,19 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": null,
    "id": "6e7ff010-02a8-41b6-9186-249f50c928af",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "<matplotlib.collections.PathCollection at 0x7f4cd1d06a90>"
+       "<matplotlib.collections.PathCollection at 0x7faa9202b040>"
       ]
      },
      "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {
-      "needs_background": "light"
-     },
-     "output_type": "display_data"
     }
    ],
    "source": [
@@ -118,21 +106,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": null,
    "id": "3ce9bb78-9372-4545-bc59-d5b34110f4e4",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "(array([0.19998864, 0.90325107]), 1, (2,), ())"
-      ]
-     },
-     "execution_count": 7,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "X_sample = X[0]\n",
     "y_sample = y[0]\n",
@@ -149,21 +126,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": null,
    "id": "9222edd0-b637-4ecb-9caa-72c9a3c3ac87",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "'1.9.1'"
-      ]
-     },
-     "execution_count": 8,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "# Turn data into tensors\n",
     "import torch\n",
@@ -172,28 +138,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": null,
    "id": "6aa4b0cf-4083-4d12-917d-922e6fd2e29e",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "dtype('float64')"
-      ]
-     },
-     "execution_count": 9,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "X.dtype"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": null,
    "id": "2753f00a-4a3f-4a43-9478-a7d75d71739e",
    "metadata": {},
    "outputs": [],
@@ -204,30 +159,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": null,
    "id": "63101d66-1885-4301-af7f-b44a7f395783",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "(tensor([[ 0.2000,  0.9033],\n",
-       "         [ 1.2675, -0.5809]], device='cuda:0'),\n",
-       " tensor([1., 0.], device='cuda:0'))"
-      ]
-     },
-     "execution_count": 11,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "X[:2],y[:2]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": null,
    "id": "3e6a4eff-c445-403f-80fc-18ab99198445",
    "metadata": {},
    "outputs": [],
@@ -237,7 +179,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": null,
    "id": "6c471846-97c3-472e-aca1-08693a3171e9",
    "metadata": {},
    "outputs": [],
@@ -247,21 +189,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": null,
    "id": "fca47fc4-07d6-4d78-8e3e-6a1dccf90e50",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "(7500, 2500)"
-      ]
-     },
-     "execution_count": 14,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "len(X_train),len(y_test)"
    ]
@@ -286,7 +217,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": null,
    "id": "e4bb97f8-f903-4be8-8354-5078c0770be6",
    "metadata": {},
    "outputs": [],
@@ -300,21 +231,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": null,
    "id": "db5dec91-3e0f-4bce-8c9a-9ab0e12f2ab6",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "'cuda'"
-      ]
-     },
-     "execution_count": 16,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "device"
    ]
@@ -341,7 +261,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": null,
    "id": "5b576cb8-6f5e-430c-8f23-79f49ce25680",
    "metadata": {},
    "outputs": [],
@@ -349,16 +269,18 @@
     "class CircleModelV0(nn.Module):\n",
     "    def __init__(self):\n",
     "        super().__init__()\n",
-    "        self.layer_1 = nn.Linear(2,1024) # \n",
-    "        self.layer_2 = nn.Linear(1024,1)\n",
+    "        self.layer_1 = nn.Linear(2,2048) # \n",
+    "        self.layer_2 = nn.Linear(2048,1)\n",
+    "        self.relu = nn.ReLU()\n",
     "    \n",
     "    def forward(self,X):\n",
-    "        return self.layer_2(self.layer_1(X)) # x -> layer_1 -> layer_2"
+    "        # return self.layer_2(self.relu(self.layer_1(X))) # x -> layer_1 -> layer_2\n",
+    "        return self.layer_2(self.layer_1(X))"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": null,
    "id": "4bbfcf00-9238-4fa8-9828-b6819ef4c37a",
    "metadata": {},
    "outputs": [],
@@ -368,80 +290,40 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": null,
    "id": "0f56fa75-4618-4fd1-b715-6484fd99d1d2",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "CircleModelV0(\n",
-       "  (layer_1): Linear(in_features=2, out_features=1024, bias=True)\n",
-       "  (layer_2): Linear(in_features=1024, out_features=1, bias=True)\n",
-       ")"
-      ]
-     },
-     "execution_count": 19,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "model_0"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": null,
    "id": "51d7072c-62cc-456f-833a-2be2b64ebc4f",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "[Parameter containing:\n",
-       " tensor([[ 0.0397, -0.2057],\n",
-       "         [-0.3409, -0.1964],\n",
-       "         [ 0.3998, -0.5351],\n",
-       "         ...,\n",
-       "         [ 0.0329, -0.1262],\n",
-       "         [ 0.3635, -0.0037],\n",
-       "         [-0.2986, -0.4017]], device='cuda:0', requires_grad=True),\n",
-       " Parameter containing:\n",
-       " tensor([-0.6824, -0.3856, -0.5077,  ..., -0.2906,  0.2728, -0.6431],\n",
-       "        device='cuda:0', requires_grad=True),\n",
-       " Parameter containing:\n",
-       " tensor([[ 0.0185, -0.0038,  0.0112,  ..., -0.0084, -0.0060, -0.0152]],\n",
-       "        device='cuda:0', requires_grad=True),\n",
-       " Parameter containing:\n",
-       " tensor([-0.0002], device='cuda:0', requires_grad=True)]"
-      ]
-     },
-     "execution_count": 20,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "list(model_0.parameters())"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": null,
    "id": "901e21ea-fffd-4d36-a66d-fccfcb25b97c",
    "metadata": {},
    "outputs": [],
    "source": [
-    "model_0 = nn.Sequential(\n",
-    "    nn.Linear(in_features=2,out_features=64),\n",
-    "    nn.Linear(64,1)\n",
-    ").to(device)"
+    "# model_0 = nn.Sequential(\n",
+    "#     nn.Linear(in_features=2,out_features=64),\n",
+    "#     nn.Linear(64,1)\n",
+    "# ).to(device)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": null,
    "id": "57d821aa-4df2-4690-88dc-fd03a2c22c4e",
    "metadata": {},
    "outputs": [],
@@ -451,22 +333,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": null,
    "id": "3a4f63d0-695a-4fe4-9bf0-2f972351a0fe",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "(tensor([-0.2167], device='cuda:0', grad_fn=<SelectBackward>),\n",
-       " tensor(1., device='cuda:0'))"
-      ]
-     },
-     "execution_count": 23,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
     "untrained_preds[0],y_test[0]"
    ]
@@ -491,7 +361,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": null,
    "id": "b4fffd34-874d-403c-a43b-c9f76828204f",
    "metadata": {},
    "outputs": [],
@@ -502,28 +372,28 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": null,
    "id": "ded59de8-8301-47b0-8812-d2a0b959de42",
    "metadata": {},
    "outputs": [],
    "source": [
-    "optimizer = torch.optim.SGD(model_0.parameters(),lr=0.01)"
+    "optimizer = torch.optim.Adam(model_0.parameters())"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": null,
    "id": "c8fb58df-f9ed-4ca7-9ed9-3edbf264e38c",
    "metadata": {},
    "outputs": [],
    "source": [
-    "epochs = 100\n",
+    "epochs = 10000\n",
     "batch_size = 32"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": null,
    "id": "a758eed4-6371-4419-9a80-bd15de2077fe",
    "metadata": {},
    "outputs": [],
@@ -549,18 +419,358 @@
     "5. Optimizer step"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "12777f1d-6766-47ff-a17c-a45d856e3ec7",
+   "metadata": {},
+   "source": [
+    "### Going from raw logits -> prediciton probabilities -> prediction labels\n",
+    "\n",
+    "Our model outputs are going to be raw **logits**\n",
+    "\n",
+    "We can convert these logits into probabilities by passing them through activation functions\n",
+    "\n",
+    "Then we can conver out model's prediction probabilities to prediction labels by either round them or taking their `argmax()`"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "540cb862-58df-46fc-8bb8-04d269d6e1b6",
+   "id": "d02c538b-79bd-4cbc-9648-590ee82dea41",
    "metadata": {},
    "outputs": [],
-   "source": []
+   "source": [
+    "y_logits = model_0(X_test)"
+   ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "d02c538b-79bd-4cbc-9648-590ee82dea41",
+   "id": "8138bd11-2103-402d-965c-5512659c47f5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_preds_probs = torch.sigmoid(y_logits)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7733cf1d-1081-490d-97cc-d64cb4808a07",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_preds_probs.round()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "a170e2cd-88ae-4c6d-920f-0e78a908a28a",
+   "metadata": {},
+   "source": [
+    "For our prediction probability values, we need to perform a range-style rooudning on them:\n",
+    "\n",
+    "`y_pred_probs` >= 0.5 then y = 1\n",
+    "\n",
+    "`y_pred_probs` <=0.5 then y = 0"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "3216df2b-5be7-433e-bb91-37c72995f32f",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_pred_labels = torch.round(torch.sigmoid(model_0(X_test)))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "38e2b2dc-5ffc-4d0a-bb29-2eb1f177b6f5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_preds = torch.round(y_preds_probs)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "dc0e34fb-9063-445f-8d32-490cf7cc0d51",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_preds.squeeze()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "139efdfa-85cb-497b-86fa-c6c722d64375",
+   "metadata": {},
+   "source": [
+    "### Building a training and testing loop"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "52720b86-2dac-4f0a-acb6-baa5bbe0a48a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "test_loss_iter = []\n",
+    "train_loss_iter = []\n",
+    "train_accuracy_iter = []\n",
+    "test_accuracy_iter = []"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "331a4db9-a27e-4431-9555-c0ca9c5c555c",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from tqdm import tqdm"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "31c3e15e-8737-4372-8a1e-4086d5a00a2a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# %%time\n",
+    "# epochs = 100\n",
+    "# batch_size = 32\n",
+    "\n",
+    "# for epoch in tqdm(range(epochs)):\n",
+    "#     for i in range(0,len(X_train),batch_size):\n",
+    "#         X_batch = X_train[i:i+batch_size]\n",
+    "#         y_batch = y_train[i:i+batch_size]\n",
+    "#         preds = model_0(X_batch)\n",
+    "#         true_preds = torch.round(torch.sigmoid(preds.squeeze()))\n",
+    "#         loss = loss_fn(preds.squeeze(),y_batch.squeeze())\n",
+    "#         optimizer.zero_grad()\n",
+    "#         loss.backward()\n",
+    "#         optimizer.step()\n",
+    "#     with torch.inference_mode():\n",
+    "#         y_test_preds = model_0(X_test)\n",
+    "#         loss_test = loss_fn(y_test_preds.squeeze(),y_test.squeeze())\n",
+    "#         true_test_preds = torch.round(torch.sigmoid(y_test_preds))\n",
+    "#     train_loss_iter.append(loss.cpu().detach().numpy())\n",
+    "#     test_loss_iter.append(loss_test.cpu().detach().numpy())\n",
+    "#     train_accuracy_iter.append(accuracy_fn(y_batch,true_preds))\n",
+    "#     test_accuracy_iter.append(accuracy_fn(y_test,true_test_preds))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "ecd6d102-1696-404e-85fd-0664affb1730",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "for epoch in tqdm(range(epochs)):\n",
+    "    model_0.train()\n",
+    "    y_logists = model_0(X_train).squeeze()\n",
+    "    y_pred = torch.round(torch.sigmoid(y_logits))\n",
+    "    loss = loss_fn(y_logists,y_train)\n",
+    "    acc = accuracy_fn(y_true=y_train,y_preds=y_pred)\n",
+    "    optimizer.zero_grad()\n",
+    "    loss.backward()\n",
+    "    optimizer.step()\n",
+    "    model_0.eval()\n",
+    "    with torch.inference_mode():\n",
+    "        test_logits = model_0(X_test).squeeze()\n",
+    "        test_pred = torch.round(torch.sigmoid(test_logits))\n",
+    "        \n",
+    "        test_loss = loss_fn(test_logits,y_test)\n",
+    "        test_acc = accuracy_fn(y_true=y_test,y_preds=test_pred)\n",
+    "        \n",
+    "print(f\"\"\"\n",
+    "        Loss : {loss}\n",
+    "        Accuracy : {acc}\n",
+    "        Test Loss : {test_loss}\n",
+    "        Test Accuracy : {test_acc}\n",
+    "        \"\"\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "4864974d-7a29-4f1b-885c-a9540787bc78",
+   "metadata": {},
+   "source": [
+    "## Make predictions \n",
+    "\n",
+    "From the metrics it looks like its not learning anything which is becz we dont have an activation function\n",
+    "\n",
+    "So we weill visalize the predictions"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "c3032661-42bd-4c14-b267-c32d00507d35",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import requests\n",
+    "from pathlib import Path\n",
+    "\n",
+    "# Download helper functions from PyTorch repo\n",
+    "if not Path(\"helper_functions.py\").is_file():\n",
+    "    request = requests.get(\"https://raw.githubusercontent.com/mrdbourke/pytorch-deep-learning/main/helper_functions.py\")\n",
+    "    with open(\"helper_functions.py\",\"wb\") as f:\n",
+    "        f.write(request.content)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "11998826-a2ab-4ec1-a507-843f3ba6ee83",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from helper_functions import *"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "1fa3ae8d-ff73-4fca-8969-7e6f61d193b1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "plt.figure(figsize=(12,6))\n",
+    "plt.subplot(1,2,1)\n",
+    "plt.title(\"Train\")\n",
+    "plot_decision_boundary(model_0,X_train,y_train)\n",
+    "plt.subplot(1,2,2)\n",
+    "plt.title(\"Test\")\n",
+    "plot_decision_boundary(model_0,X_test,y_test)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "27691bf2-f284-4326-8716-6582ff0d01a7",
+   "metadata": {},
+   "source": [
+    "## Improving the model\n",
+    "\n",
+    "- Add more layers\n",
+    "- Add more hidden unit\n",
+    "- More epochs\n",
+    "- Adding activation functions\n",
+    "- Changing the learning rate\n",
+    "- Change the loss function"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7e86bc59-3c59-4034-9d02-2d613bae6134",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class ClassificationModel(nn.Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.activation = nn.ReLU()\n",
+    "        self.linear1 = nn.Linear(2,128)\n",
+    "        self.linear2 = nn.Linear(256,512)\n",
+    "        self.linear3 = nn.Linear(512,1024)\n",
+    "        self.linear4 = nn.Linear(1024,512)\n",
+    "        self.linear5_output = nn.Linear(512,1)\n",
+    "    \n",
+    "    def forward(self,X):\n",
+    "        X = self.activation(self.linear1(X))\n",
+    "        X = self.activation(self.linear2(X))\n",
+    "        X = self.activation(self.linear3(X))\n",
+    "        X = self.activation(self.linear4(X))\n",
+    "        X = self.linear5_output(X)\n",
+    "        return X"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "b920af4c-9c22-4ecb-861c-1adff8dcd7a8",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = ClassificationModel().to(device)\n",
+    "criterion = nn.BCEWithLogitsLoss()\n",
+    "optimizer = torch.optim.Adam(model.parameters())"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "9aaacafc-8266-4d3c-9593-c5622803fcd2",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "epochs = 1000\n",
+    "batch_size = 32"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "fc380eaf-2207-426a-be96-b671d8092066",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import wandb"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "45f48d97-bf43-46f1-bc6a-9865d4a57097",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "wandb.init(project=\"02\",name=\"Adjusted\")\n",
+    "for epoch in tqdm(range(epochs)):\n",
+    "    for i in range(0,len(X_train),batch_size):\n",
+    "        torch.cuda.empty_cache()\n",
+    "        model.train()\n",
+    "        X_batch = X_train[i:i+batch_size]\n",
+    "        y_batch = y_train[i:i+batch_size]\n",
+    "        preds = model(X_batch).squeeze()\n",
+    "        norm_preds = torch.round(torch.sigmoid(preds))\n",
+    "        loss = criterion(preds,y_batch)\n",
+    "        optimizer.zero_grad()\n",
+    "        loss.backward()\n",
+    "        optimizer.step()\n",
+    "        model.eval()\n",
+    "        with torch.inference_mode():\n",
+    "            train_preds = model(X_train).squeeze()\n",
+    "            test_preds = model(X_test).squeeze()\n",
+    "            loss_test = criterion(test_preds,y_test)\n",
+    "            loss_train = criterion(train_preds,y_train)\n",
+    "            train_preds = torch.round(torch.sigmoid(train_preds))\n",
+    "            test_preds = torch.round(torch.sigmoid(test_preds))\n",
+    "            acc_train = accuracy_fn(y_train,train_preds)\n",
+    "            acc_test = accuracy_fn(y_test,test_preds)\n",
+    "            wandb.log({\n",
+    "                \"Train Loss\":loss_train,\n",
+    "                \"Test Loss\":loss_test,\n",
+    "                \"Train Accuracy\": acc_train,\n",
+    "                \"Test Accuracy\": acc_test\n",
+    "            })\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "de328d5d-237d-4d35-88ef-b0ec39bb0f90",
    "metadata": {},
    "outputs": [],
    "source": []
diff --git a/.virtual_documents/02.ipynb.py b/.virtual_documents/02.ipynb.py
index 998c34e..4a862d1 100644
--- a/.virtual_documents/02.ipynb.py
+++ b/.virtual_documents/02.ipynb.py
@@ -1,8 +1,8 @@
 import sklearn
 from sklearn.datasets import make_circles
 # Make 100 Samples
-n_samples = 10000
-X,y = make_circles(n_samples,noise=0.125,random_state=42)
+n_samples = 25000
+X,y = make_circles(n_samples,noise=0.0625,random_state=42)
 
 
 import matplotlib.pyplot as plt
@@ -67,11 +67,13 @@ device
 class CircleModelV0(nn.Module):
     def __init__(self):
         super().__init__()
-        self.layer_1 = nn.Linear(2,1024) # 
-        self.layer_2 = nn.Linear(1024,1)
+        self.layer_1 = nn.Linear(2,2048) # 
+        self.layer_2 = nn.Linear(2048,1)
+        self.relu = nn.ReLU()
     
     def forward(self,X):
-        return self.layer_2(self.layer_1(X)) # x -> layer_1 -> layer_2
+        # return self.layer_2(self.relu(self.layer_1(X))) # x -> layer_1 -> layer_2
+        return self.layer_2(self.layer_1(X))
 
 
 model_0 = CircleModelV0().to(device)
@@ -83,10 +85,10 @@ model_0
 list(model_0.parameters())
 
 
-model_0 = nn.Sequential(
-    nn.Linear(in_features=2,out_features=64),
-    nn.Linear(64,1)
-).to(device)
+# model_0 = nn.Sequential(
+#     nn.Linear(in_features=2,out_features=64),
+#     nn.Linear(64,1)
+# ).to(device)
 
 
 untrained_preds = model_0(X_test)
@@ -99,10 +101,10 @@ loss_fn = nn.BCEWithLogitsLoss() # has the sigmoid function builtin
 # BCELoss() requries sigmoid to be builtin to the model itself
 
 
-optimizer = torch.optim.SGD(model_0.parameters(),lr=0.01)
+optimizer = torch.optim.Adam(model_0.parameters())
 
 
-epochs = 100
+epochs = 10000
 batch_size = 32
 
 
@@ -113,7 +115,165 @@ def accuracy_fn(y_true,y_preds):
     return acc
 
 
+y_logits = model_0(X_test)
 
 
+y_preds_probs = torch.sigmoid(y_logits)
+
+
+y_preds_probs.round()
+
+
+y_pred_labels = torch.round(torch.sigmoid(model_0(X_test)))
+
+
+y_preds = torch.round(y_preds_probs)
+
+
+y_preds.squeeze()
+
+
+test_loss_iter = []
+train_loss_iter = []
+train_accuracy_iter = []
+test_accuracy_iter = []
+
+
+from tqdm import tqdm
+
+
+# get_ipython().run_line_magic("%time", "")
+# epochs = 100
+# batch_size = 32
+
+# for epoch in tqdm(range(epochs)):
+#     for i in range(0,len(X_train),batch_size):
+#         X_batch = X_train[i:i+batch_size]
+#         y_batch = y_train[i:i+batch_size]
+#         preds = model_0(X_batch)
+#         true_preds = torch.round(torch.sigmoid(preds.squeeze()))
+#         loss = loss_fn(preds.squeeze(),y_batch.squeeze())
+#         optimizer.zero_grad()
+#         loss.backward()
+#         optimizer.step()
+#     with torch.inference_mode():
+#         y_test_preds = model_0(X_test)
+#         loss_test = loss_fn(y_test_preds.squeeze(),y_test.squeeze())
+#         true_test_preds = torch.round(torch.sigmoid(y_test_preds))
+#     train_loss_iter.append(loss.cpu().detach().numpy())
+#     test_loss_iter.append(loss_test.cpu().detach().numpy())
+#     train_accuracy_iter.append(accuracy_fn(y_batch,true_preds))
+#     test_accuracy_iter.append(accuracy_fn(y_test,true_test_preds))
+
+
+for epoch in tqdm(range(epochs)):
+    model_0.train()
+    y_logists = model_0(X_train).squeeze()
+    y_pred = torch.round(torch.sigmoid(y_logits))
+    loss = loss_fn(y_logists,y_train)
+    acc = accuracy_fn(y_true=y_train,y_preds=y_pred)
+    optimizer.zero_grad()
+    loss.backward()
+    optimizer.step()
+    model_0.eval()
+    with torch.inference_mode():
+        test_logits = model_0(X_test).squeeze()
+        test_pred = torch.round(torch.sigmoid(test_logits))
+        
+        test_loss = loss_fn(test_logits,y_test)
+        test_acc = accuracy_fn(y_true=y_test,y_preds=test_pred)
+        
+print(f"""
+        Loss : {loss}
+        Accuracy : {acc}
+        Test Loss : {test_loss}
+        Test Accuracy : {test_acc}
+        """)
+
+
+import requests
+from pathlib import Path
+
+# Download helper functions from PyTorch repo
+if not Path("helper_functions.py").is_file():
+    request = requests.get("https://raw.githubusercontent.com/mrdbourke/pytorch-deep-learning/main/helper_functions.py")
+    with open("helper_functions.py","wb") as f:
+        f.write(request.content)
+
+
+from helper_functions import *
+
+
+plt.figure(figsize=(12,6))
+plt.subplot(1,2,1)
+plt.title("Train")
+plot_decision_boundary(model_0,X_train,y_train)
+plt.subplot(1,2,2)
+plt.title("Test")
+plot_decision_boundary(model_0,X_test,y_test)
+
+
+class ClassificationModel(nn.Module):
+    def __init__(self):
+        super().__init__()
+        self.activation = nn.ReLU()
+        self.linear1 = nn.Linear(2,128)
+        self.linear2 = nn.Linear(256,512)
+        self.linear3 = nn.Linear(512,1024)
+        self.linear4 = nn.Linear(1024,512)
+        self.linear5_output = nn.Linear(512,1)
+    
+    def forward(self,X):
+        X = self.activation(self.linear1(X))
+        X = self.activation(self.linear2(X))
+        X = self.activation(self.linear3(X))
+        X = self.activation(self.linear4(X))
+        X = self.linear5_output(X)
+        return X
+
+
+model = ClassificationModel().to(device)
+criterion = nn.BCEWithLogitsLoss()
+optimizer = torch.optim.Adam(model.parameters())
+
+
+epochs = 1000
+batch_size = 32
+
+
+import wandb
+
+
+wandb.init(project="02",name="Adjusted")
+for epoch in tqdm(range(epochs)):
+    for i in range(0,len(X_train),batch_size):
+        torch.cuda.empty_cache()
+        model.train()
+        X_batch = X_train[i:i+batch_size]
+        y_batch = y_train[i:i+batch_size]
+        preds = model(X_batch).squeeze()
+        norm_preds = torch.round(torch.sigmoid(preds))
+        loss = criterion(preds,y_batch)
+        optimizer.zero_grad()
+        loss.backward()
+        optimizer.step()
+        model.eval()
+        with torch.inference_mode():
+            train_preds = model(X_train).squeeze()
+            test_preds = model(X_test).squeeze()
+            loss_test = criterion(test_preds,y_test)
+            loss_train = criterion(train_preds,y_train)
+            train_preds = torch.round(torch.sigmoid(train_preds))
+            test_preds = torch.round(torch.sigmoid(test_preds))
+            acc_train = accuracy_fn(y_train,train_preds)
+            acc_test = accuracy_fn(y_test,test_preds)
+            wandb.log({
+                "Train Loss":loss_train,
+                "Test Loss":loss_test,
+                "Train Accuracy": acc_train,
+                "Test Accuracy": acc_test
+            })
+wandb.finish()
+
 
 
diff --git a/02.ipynb b/02.ipynb
index f66ddd5..f41cd72 100644
--- a/02.ipynb
+++ b/02.ipynb
@@ -18,8 +18,8 @@
     "import sklearn\n",
     "from sklearn.datasets import make_circles\n",
     "# Make 100 Samples\n",
-    "n_samples = 10000\n",
-    "X,y = make_circles(n_samples,noise=0.125,random_state=42)"
+    "n_samples = 25000\n",
+    "X,y = make_circles(n_samples,noise=0.0625,random_state=42)"
    ]
   },
   {
@@ -44,12 +44,12 @@
     {
      "data": {
       "text/plain": [
-       "(array([[ 0.19998864,  0.90325107],\n",
-       "        [ 1.26750313, -0.58094471],\n",
-       "        [-0.63155772,  0.70494095],\n",
-       "        [ 1.10157297, -0.34613108],\n",
-       "        [ 0.84793432, -0.48702293]]),\n",
-       " array([1, 0, 0, 0, 0]))"
+       "(array([[-0.89199281, -0.32863604],\n",
+       "        [ 0.81824047, -0.31242069],\n",
+       "        [ 0.17614256, -1.14754116],\n",
+       "        [ 0.70026218,  0.35655876],\n",
+       "        [ 0.6002745 ,  0.63273534]]),\n",
+       " array([0, 1, 0, 1, 1]))"
       ]
      },
      "execution_count": 3,
@@ -91,7 +91,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.collections.PathCollection at 0x7f4cd1d06a90>"
+       "<matplotlib.collections.PathCollection at 0x7faa9202b040>"
       ]
      },
      "execution_count": 6,
@@ -100,7 +100,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -125,7 +125,7 @@
     {
      "data": {
       "text/plain": [
-       "(array([0.19998864, 0.90325107]), 1, (2,), ())"
+       "(array([-0.89199281, -0.32863604]), 0, (2,), ())"
       ]
      },
      "execution_count": 7,
@@ -211,9 +211,9 @@
     {
      "data": {
       "text/plain": [
-       "(tensor([[ 0.2000,  0.9033],\n",
-       "         [ 1.2675, -0.5809]], device='cuda:0'),\n",
-       " tensor([1., 0.], device='cuda:0'))"
+       "(tensor([[-0.8920, -0.3286],\n",
+       "         [ 0.8182, -0.3124]], device='cuda:0'),\n",
+       " tensor([0., 1.], device='cuda:0'))"
       ]
      },
      "execution_count": 11,
@@ -254,7 +254,7 @@
     {
      "data": {
       "text/plain": [
-       "(7500, 2500)"
+       "(18750, 6250)"
       ]
      },
      "execution_count": 14,
@@ -349,11 +349,13 @@
     "class CircleModelV0(nn.Module):\n",
     "    def __init__(self):\n",
     "        super().__init__()\n",
-    "        self.layer_1 = nn.Linear(2,1024) # \n",
-    "        self.layer_2 = nn.Linear(1024,1)\n",
+    "        self.layer_1 = nn.Linear(2,2048) # \n",
+    "        self.layer_2 = nn.Linear(2048,1)\n",
+    "        self.relu = nn.ReLU()\n",
     "    \n",
     "    def forward(self,X):\n",
-    "        return self.layer_2(self.layer_1(X)) # x -> layer_1 -> layer_2"
+    "        # return self.layer_2(self.relu(self.layer_1(X))) # x -> layer_1 -> layer_2\n",
+    "        return self.layer_2(self.layer_1(X))"
    ]
   },
   {
@@ -376,8 +378,9 @@
      "data": {
       "text/plain": [
        "CircleModelV0(\n",
-       "  (layer_1): Linear(in_features=2, out_features=1024, bias=True)\n",
-       "  (layer_2): Linear(in_features=1024, out_features=1, bias=True)\n",
+       "  (layer_1): Linear(in_features=2, out_features=2048, bias=True)\n",
+       "  (layer_2): Linear(in_features=2048, out_features=1, bias=True)\n",
+       "  (relu): ReLU()\n",
        ")"
       ]
      },
@@ -400,21 +403,21 @@
      "data": {
       "text/plain": [
        "[Parameter containing:\n",
-       " tensor([[ 0.0397, -0.2057],\n",
-       "         [-0.3409, -0.1964],\n",
-       "         [ 0.3998, -0.5351],\n",
+       " tensor([[-0.0870, -0.5833],\n",
+       "         [ 0.4238, -0.3812],\n",
+       "         [-0.2629, -0.2815],\n",
        "         ...,\n",
-       "         [ 0.0329, -0.1262],\n",
-       "         [ 0.3635, -0.0037],\n",
-       "         [-0.2986, -0.4017]], device='cuda:0', requires_grad=True),\n",
+       "         [ 0.5214, -0.0567],\n",
+       "         [ 0.2639,  0.1567],\n",
+       "         [ 0.3929,  0.4088]], device='cuda:0', requires_grad=True),\n",
        " Parameter containing:\n",
-       " tensor([-0.6824, -0.3856, -0.5077,  ..., -0.2906,  0.2728, -0.6431],\n",
+       " tensor([-0.2957,  0.4389,  0.1257,  ...,  0.2749,  0.1367, -0.5779],\n",
        "        device='cuda:0', requires_grad=True),\n",
        " Parameter containing:\n",
-       " tensor([[ 0.0185, -0.0038,  0.0112,  ..., -0.0084, -0.0060, -0.0152]],\n",
+       " tensor([[ 0.0180, -0.0202,  0.0048,  ...,  0.0172,  0.0196,  0.0028]],\n",
        "        device='cuda:0', requires_grad=True),\n",
        " Parameter containing:\n",
-       " tensor([-0.0002], device='cuda:0', requires_grad=True)]"
+       " tensor([0.0022], device='cuda:0', requires_grad=True)]"
       ]
      },
      "execution_count": 20,
@@ -433,10 +436,10 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "model_0 = nn.Sequential(\n",
-    "    nn.Linear(in_features=2,out_features=64),\n",
-    "    nn.Linear(64,1)\n",
-    ").to(device)"
+    "# model_0 = nn.Sequential(\n",
+    "#     nn.Linear(in_features=2,out_features=64),\n",
+    "#     nn.Linear(64,1)\n",
+    "# ).to(device)"
    ]
   },
   {
@@ -458,8 +461,8 @@
     {
      "data": {
       "text/plain": [
-       "(tensor([-0.2167], device='cuda:0', grad_fn=<SelectBackward>),\n",
-       " tensor(1., device='cuda:0'))"
+       "(tensor([0.0175], device='cuda:0', grad_fn=<SelectBackward>),\n",
+       " tensor(0., device='cuda:0'))"
       ]
      },
      "execution_count": 23,
@@ -507,7 +510,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "optimizer = torch.optim.SGD(model_0.parameters(),lr=0.01)"
+    "optimizer = torch.optim.Adam(model_0.parameters())"
    ]
   },
   {
@@ -517,7 +520,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "epochs = 100\n",
+    "epochs = 10000\n",
     "batch_size = 32"
    ]
   },
@@ -549,18 +552,395 @@
     "5. Optimizer step"
    ]
   },
+  {
+   "cell_type": "markdown",
+   "id": "12777f1d-6766-47ff-a17c-a45d856e3ec7",
+   "metadata": {},
+   "source": [
+    "### Going from raw logits -> prediciton probabilities -> prediction labels\n",
+    "\n",
+    "Our model outputs are going to be raw **logits**\n",
+    "\n",
+    "We can convert these logits into probabilities by passing them through activation functions\n",
+    "\n",
+    "Then we can conver out model's prediction probabilities to prediction labels by either round them or taking their `argmax()`"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 28,
+   "id": "d02c538b-79bd-4cbc-9648-590ee82dea41",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_logits = model_0(X_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 29,
+   "id": "8138bd11-2103-402d-965c-5512659c47f5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_preds_probs = torch.sigmoid(y_logits)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 30,
+   "id": "7733cf1d-1081-490d-97cc-d64cb4808a07",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[1.],\n",
+       "        [1.],\n",
+       "        [1.],\n",
+       "        ...,\n",
+       "        [1.],\n",
+       "        [1.],\n",
+       "        [1.]], device='cuda:0', grad_fn=<RoundBackward>)"
+      ]
+     },
+     "execution_count": 30,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_preds_probs.round()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "a170e2cd-88ae-4c6d-920f-0e78a908a28a",
+   "metadata": {},
+   "source": [
+    "For our prediction probability values, we need to perform a range-style rooudning on them:\n",
+    "\n",
+    "`y_pred_probs` >= 0.5 then y = 1\n",
+    "\n",
+    "`y_pred_probs` <=0.5 then y = 0"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 31,
+   "id": "3216df2b-5be7-433e-bb91-37c72995f32f",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_pred_labels = torch.round(torch.sigmoid(model_0(X_test)))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 32,
+   "id": "38e2b2dc-5ffc-4d0a-bb29-2eb1f177b6f5",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "y_preds = torch.round(y_preds_probs)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "id": "dc0e34fb-9063-445f-8d32-490cf7cc0d51",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([1., 1., 1.,  ..., 1., 1., 1.], device='cuda:0',\n",
+       "       grad_fn=<SqueezeBackward0>)"
+      ]
+     },
+     "execution_count": 33,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "y_preds.squeeze()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "139efdfa-85cb-497b-86fa-c6c722d64375",
+   "metadata": {},
+   "source": [
+    "### Building a training and testing loop"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 34,
+   "id": "52720b86-2dac-4f0a-acb6-baa5bbe0a48a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "test_loss_iter = []\n",
+    "train_loss_iter = []\n",
+    "train_accuracy_iter = []\n",
+    "test_accuracy_iter = []"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 35,
+   "id": "331a4db9-a27e-4431-9555-c0ca9c5c555c",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from tqdm import tqdm"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 36,
+   "id": "31c3e15e-8737-4372-8a1e-4086d5a00a2a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# %%time\n",
+    "# epochs = 100\n",
+    "# batch_size = 32\n",
+    "\n",
+    "# for epoch in tqdm(range(epochs)):\n",
+    "#     for i in range(0,len(X_train),batch_size):\n",
+    "#         X_batch = X_train[i:i+batch_size]\n",
+    "#         y_batch = y_train[i:i+batch_size]\n",
+    "#         preds = model_0(X_batch)\n",
+    "#         true_preds = torch.round(torch.sigmoid(preds.squeeze()))\n",
+    "#         loss = loss_fn(preds.squeeze(),y_batch.squeeze())\n",
+    "#         optimizer.zero_grad()\n",
+    "#         loss.backward()\n",
+    "#         optimizer.step()\n",
+    "#     with torch.inference_mode():\n",
+    "#         y_test_preds = model_0(X_test)\n",
+    "#         loss_test = loss_fn(y_test_preds.squeeze(),y_test.squeeze())\n",
+    "#         true_test_preds = torch.round(torch.sigmoid(y_test_preds))\n",
+    "#     train_loss_iter.append(loss.cpu().detach().numpy())\n",
+    "#     test_loss_iter.append(loss_test.cpu().detach().numpy())\n",
+    "#     train_accuracy_iter.append(accuracy_fn(y_batch,true_preds))\n",
+    "#     test_accuracy_iter.append(accuracy_fn(y_test,true_test_preds))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "ecd6d102-1696-404e-85fd-0664affb1730",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      " 85%|████████████████████████████████████████▉       | 8540/10000 [01:56<00:20, 70.58it/s]"
+     ]
+    }
+   ],
+   "source": [
+    "for epoch in tqdm(range(epochs)):\n",
+    "    model_0.train()\n",
+    "    y_logists = model_0(X_train).squeeze()\n",
+    "    y_pred = torch.round(torch.sigmoid(y_logits))\n",
+    "    loss = loss_fn(y_logists,y_train)\n",
+    "    acc = accuracy_fn(y_true=y_train,y_preds=y_pred)\n",
+    "    optimizer.zero_grad()\n",
+    "    loss.backward()\n",
+    "    optimizer.step()\n",
+    "    model_0.eval()\n",
+    "    with torch.inference_mode():\n",
+    "        test_logits = model_0(X_test).squeeze()\n",
+    "        test_pred = torch.round(torch.sigmoid(test_logits))\n",
+    "        \n",
+    "        test_loss = loss_fn(test_logits,y_test)\n",
+    "        test_acc = accuracy_fn(y_true=y_test,y_preds=test_pred)\n",
+    "        \n",
+    "print(f\"\"\"\n",
+    "        Loss : {loss}\n",
+    "        Accuracy : {acc}\n",
+    "        Test Loss : {test_loss}\n",
+    "        Test Accuracy : {test_acc}\n",
+    "        \"\"\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "4864974d-7a29-4f1b-885c-a9540787bc78",
+   "metadata": {},
+   "source": [
+    "## Make predictions \n",
+    "\n",
+    "From the metrics it looks like its not learning anything which is becz we dont have an activation function\n",
+    "\n",
+    "So we weill visalize the predictions"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "540cb862-58df-46fc-8bb8-04d269d6e1b6",
+   "id": "c3032661-42bd-4c14-b267-c32d00507d35",
    "metadata": {},
    "outputs": [],
-   "source": []
+   "source": [
+    "import requests\n",
+    "from pathlib import Path\n",
+    "\n",
+    "# Download helper functions from PyTorch repo\n",
+    "if not Path(\"helper_functions.py\").is_file():\n",
+    "    request = requests.get(\"https://raw.githubusercontent.com/mrdbourke/pytorch-deep-learning/main/helper_functions.py\")\n",
+    "    with open(\"helper_functions.py\",\"wb\") as f:\n",
+    "        f.write(request.content)"
+   ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "d02c538b-79bd-4cbc-9648-590ee82dea41",
+   "id": "11998826-a2ab-4ec1-a507-843f3ba6ee83",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from helper_functions import *"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "1fa3ae8d-ff73-4fca-8969-7e6f61d193b1",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "plt.figure(figsize=(12,6))\n",
+    "plt.subplot(1,2,1)\n",
+    "plt.title(\"Train\")\n",
+    "plot_decision_boundary(model_0,X_train,y_train)\n",
+    "plt.subplot(1,2,2)\n",
+    "plt.title(\"Test\")\n",
+    "plot_decision_boundary(model_0,X_test,y_test)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "27691bf2-f284-4326-8716-6582ff0d01a7",
+   "metadata": {},
+   "source": [
+    "## Improving the model\n",
+    "\n",
+    "- Add more layers\n",
+    "- Add more hidden unit\n",
+    "- More epochs\n",
+    "- Adding activation functions\n",
+    "- Changing the learning rate\n",
+    "- Change the loss function"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7e86bc59-3c59-4034-9d02-2d613bae6134",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class ClassificationModel(nn.Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.activation = nn.ReLU()\n",
+    "        self.linear1 = nn.Linear(2,128)\n",
+    "        self.linear2 = nn.Linear(256,512)\n",
+    "        self.linear3 = nn.Linear(512,1024)\n",
+    "        self.linear4 = nn.Linear(1024,512)\n",
+    "        self.linear5_output = nn.Linear(512,1)\n",
+    "    \n",
+    "    def forward(self,X):\n",
+    "        X = self.activation(self.linear1(X))\n",
+    "        X = self.activation(self.linear2(X))\n",
+    "        X = self.activation(self.linear3(X))\n",
+    "        X = self.activation(self.linear4(X))\n",
+    "        X = self.linear5_output(X)\n",
+    "        return X"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "b920af4c-9c22-4ecb-861c-1adff8dcd7a8",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = ClassificationModel().to(device)\n",
+    "criterion = nn.BCEWithLogitsLoss()\n",
+    "optimizer = torch.optim.Adam(model.parameters())"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "9aaacafc-8266-4d3c-9593-c5622803fcd2",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "epochs = 1000\n",
+    "batch_size = 32"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "fc380eaf-2207-426a-be96-b671d8092066",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "import wandb"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "45f48d97-bf43-46f1-bc6a-9865d4a57097",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "wandb.init(project=\"02\",name=\"Adjusted\")\n",
+    "for epoch in tqdm(range(epochs)):\n",
+    "    for i in range(0,len(X_train),batch_size):\n",
+    "        torch.cuda.empty_cache()\n",
+    "        model.train()\n",
+    "        X_batch = X_train[i:i+batch_size]\n",
+    "        y_batch = y_train[i:i+batch_size]\n",
+    "        preds = model(X_batch).squeeze()\n",
+    "        norm_preds = torch.round(torch.sigmoid(preds))\n",
+    "        loss = criterion(preds,y_batch)\n",
+    "        optimizer.zero_grad()\n",
+    "        loss.backward()\n",
+    "        optimizer.step()\n",
+    "        model.eval()\n",
+    "        with torch.inference_mode():\n",
+    "            train_preds = model(X_train).squeeze()\n",
+    "            test_preds = model(X_test).squeeze()\n",
+    "            loss_test = criterion(test_preds,y_test)\n",
+    "            loss_train = criterion(train_preds,y_train)\n",
+    "            train_preds = torch.round(torch.sigmoid(train_preds))\n",
+    "            test_preds = torch.round(torch.sigmoid(test_preds))\n",
+    "            acc_train = accuracy_fn(y_train,train_preds)\n",
+    "            acc_test = accuracy_fn(y_test,test_preds)\n",
+    "            wandb.log({\n",
+    "                \"Train Loss\":loss_train,\n",
+    "                \"Test Loss\":loss_test,\n",
+    "                \"Train Accuracy\": acc_train,\n",
+    "                \"Test Accuracy\": acc_test\n",
+    "            })\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "de328d5d-237d-4d35-88ef-b0ec39bb0f90",
    "metadata": {},
    "outputs": [],
    "source": []
